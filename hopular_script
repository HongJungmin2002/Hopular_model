import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import LabelEncoder

# 데이터 불러오기
df = pd.read_excel('/content/merged_article_profile_with_classes.xlsx', encoding='')

# 데이터 전처리
df['Following'] = df['Following'].fillna('0').astype(str).str.replace(',', '').astype(int)
df['Followers'] = df['Followers'].fillna('0').astype(str).str.replace(',', '').astype(int)
df['Posts'] = df['Posts'].fillna('0').astype(str).str.replace(',', '').astype(int)

# 레이블 인코딩
encoder = LabelEncoder()
df['article_CLASS'] = encoder.fit_transform(df['article_CLASS'])

# 피처와 레이블 분리
X = df.drop(columns=['article_CLASS'])
y = df['article_CLASS']

# 표준화
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 훈련 데이터와 테스트 데이터로 분할
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Hopular 모델 구축
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

# 모델 컴파일
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 모델 훈련
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# 모델 평가
y_pred = model.predict(X_test)
y_pred_binary = np.where(y_pred > 0.5, 1, 0)
accuracy = accuracy_score(y_test, y_pred_binary)
print("Accuracy:", accuracy)
